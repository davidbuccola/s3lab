configure(allprojects) {

    repositories {
        mavenCentral()
        mavenLocal()
        maven { url = 'https://oss.sonatype.org/content/repositories/snapshots/' }
    }
}

configure(rootProject) {
    ext.gitHash = 'git log -1 --format=%H'.execute().text.trim()
}

configure(subprojects) {
    ext.gitHash = rootProject.gitHash  // Copy from the root so we don't execute git command multiple times
}

allprojects {
    afterEvaluate { memberProject ->
        configure(memberProject) {

            // Configure Java and/or Scala.
            if (plugins.hasPlugin('java') || plugins.hasPlugin('java-library') || plugins.hasPlugin('scala') || plugins.hasPlugin('scala-library')) {

                sourceCompatibility = JavaVersion.VERSION_11
                targetCompatibility = JavaVersion.VERSION_11

                task('sourcesJar', type: Jar, dependsOn: classes) {
                    classifier = 'sources'
                    if (sourceSets.main.hasProperty('allJava')) from sourceSets.main.allJava.srcDirs
                    if (sourceSets.main.hasProperty('allScala')) from sourceSets.main.allScala.srcDirs
                }

                task('javadocJar', type: Jar) {
                    classifier = 'javadoc'
                    if (tasks.hasProperty('javadoc')) from javadoc.destinationDir
                    if (tasks.hasProperty('scaladoc')) from scaladoc.destinationDir
                }

                artifacts {
                    archives sourcesJar
                    archives javadocJar
                }

                tasks.withType(JavaCompile) {
                    options.debug = true
                    options.encoding = 'UTF-8'
                }

                tasks.withType(Jar) {
                    manifest {
                        attributes(
                                'Implementation-Title': project.description,
                                'Implementation-Version': project.version,
                                'Implementation-Vendor': project.group,
                                'Source-Revision': gitHash
                        )
                    }
                }

                tasks.withType(Test) {
                    jvmArgs '-Xmx1024m', "-Djava.library.path=${buildDir}/lib"
                }

                // Input libraries shouldn't define concrete log bindings. Leave that to the application.
                configurations.findAll { !it.name.endsWith('Classpath') }.each { configuration ->
                    configuration.dependencies.each { dependency ->
                        if (dependency.getClass().getSimpleName().contains("ExternalModuleDependency")) {
                            dependency.exclude group: 'org.slf4j', module: 'log4j-over-slf4j'
                            dependency.exclude group: 'org.slf4j', module: 'slf4j-log4j12'
                            dependency.exclude group: 'org.slf4j', module: 'jcl-over-slf4j'
                            dependency.exclude group: 'ch.qos.logback', module: 'logback-classic'
                        }
                    }
                }

                // Make sure compile-only dependencies are NOT transitive. When they're transitive you can compile against
                // an unexpected version of a transitive dependency.
                configurations.findAll { it.name.equals('compileOnly') }.each { configuration ->
                    configuration.dependencies.each {
                        it.transitive = false
                    }
                }
            }

            // Configure Idea for javadoc and source download.
            if (plugins.hasPlugin('idea')) {
                idea {
                    module {
                        downloadJavadoc = true
                        downloadSources = true
                        inheritOutputDirs = false

                        // Match the newer gradle conventions
                        if (sourceSets.main.hasProperty('allScala')) {
                            outputDir = file("$buildDir/classes/scala/main")
                            testOutputDir = file("$buildDir/classes/scala/test")

                        } else if (sourceSets.main.hasProperty('allJava')) {
                            outputDir = file("$buildDir/classes/java/main")
                            testOutputDir = file("$buildDir/classes/java/test")
                        }
                    }
                }
            }
        }
    }
}
